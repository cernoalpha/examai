{"version":3,"sources":["../src/index.ts","../src/components/index.ts","../src/modules/chat.completions/operations/v1_chat_completions_create.ts","../src/utils/index.ts","../src/modules/chat.completions/index.ts","../src/modules/embeddings/operations/v1_embeddings_create.ts","../src/modules/embeddings/index.ts","../src/modules/models/operations/v1_models_list.ts","../src/modules/models/operations/v1_models_retrieve.ts","../src/modules/models/index.ts","../src/modules/repositories/operations/v1_repositories_create.ts","../src/modules/repositories/index.ts","../src/modules/repository.document/operations/v1_repository_document_create.ts","../src/modules/repository.document/index.ts","../src/modules/feedbacks/operations/v1_set_trace_feedback_create.ts","../src/modules/feedbacks/index.ts","../src/modules/traces/operations/v1_traces_list.ts","../src/modules/traces/operations/v1_traces_retrieve.ts","../src/modules/traces/index.ts"],"names":[],"mappings":"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","sourcesContent":["import axios, { Axios, AxiosError, AxiosRequestConfig, CreateAxiosDefaults } from \"axios\"\nimport { PremBaseConfig } from \"$types/index\"\n\nimport chatcompletionsModule from \"$modules/chat.completions\"\nimport embeddingsModule from \"$modules/embeddings\"\nimport modelsModule from \"$modules/models\"\nimport repositoriesModule from \"$modules/repositories\"\nimport repositorydocumentModule from \"$modules/repository.document\"\nimport feedbacksModule from \"$modules/feedbacks\"\nimport tracesModule from \"$modules/traces\"\n\nexport default class Prem {\n  config: PremBaseConfig & { baseUrl: string }\n  axios: Axios\n\n  chat = { completions: new chatcompletionsModule(this) }\n\tembeddings = new embeddingsModule(this)\n\tmodels = new modelsModule(this)\n\trepositories = new repositoriesModule(this)\n\trepository = { document: new repositorydocumentModule(this) }\n\tfeedbacks = new feedbacksModule(this)\n\ttraces = new tracesModule(this)\n\n  constructor(config: PremBaseConfig, axiosConfig?: CreateAxiosDefaults) {\n    this.config = Object.assign({ baseUrl: \"https://app.premai.io\" }, config)\n\n    this.axios = axios.create(axiosConfig)\n\n    this.axios.defaults.baseURL = this.config.baseUrl\n    this.axios.defaults.headers.common[\"Authorization\"] = `Bearer ${this.config.apiKey}`\n  }\n\n  call = async<T>(request: AxiosRequestConfig): Promise<T> => {\n    try {\n      const { data } = await this.axios.request<T>(request)\n      return data\n    } catch (e) {\n      const error = e as AxiosError\n      const { response } = error\n\n      if (response?.data) {\n        throw response.data\n      }\n\n      throw error\n    }\n  }\n}\n\nexport type * from \"$types/index\"\n","import Prem from \"../index\"\n\nexport class APIModule {\n  protected client: Prem\n\n  constructor(client: Prem) {\n    this.client = client\n  }\n}\n","import { AxiosRequestConfig } from \"axios\"\nimport Prem from \"$src/index\"\nimport EventEmitter from \"events\"\nimport { parseEventString, eventEmitterToAsyncIterable } from \"$utils/index\"\nimport type { operations } from \"$types/api\"\nimport type {\n  CreateChatCompletionRequest,\n  CreateChatCompletionResponse,\n  ChatCompletionStreamingCompletionData,\n  DocumentChunk\n} from \"$types/index\"\n\n\ntype CreateChatCompletionOut<T> = T extends true ? AsyncIterable<ChatCompletionStreamingCompletionData> & {\n  trace_id: string | null,\n  document_chunks: null | DocumentChunk[]\n} : CreateChatCompletionResponse\ntype CreateChatCompletionRequestGeneric<T extends boolean> = Omit<CreateChatCompletionRequest, \"stream\"> & { stream: T }\n\nexport default (client: Prem) => async<T extends boolean>(\n  args: CreateChatCompletionRequestGeneric<T>,\n  options?: AxiosRequestConfig\n): Promise<CreateChatCompletionOut<T>> => {\n  const baseOptions = {\n    method: \"POST\",\n    data: args,\n    url: \"/v1/chat/completions\",\n    ...options\n  }\n\n  if (args.stream) {\n    const rawStream = await client.call<EventEmitter>({\n      ...baseOptions,\n      responseType: \"stream\",\n    })\n\n    const parsedEventEmitter = new EventEmitter()\n\n    let buffer = ''\n\n    rawStream.on(\"data\", (chunk: Buffer) => {\n      buffer += chunk.toString()\n      let splitPattern = /\\n\\nevent:/g\n      let events = buffer.split(splitPattern)\n\n      if (events.length > 1) {\n        events.slice(0, -1).forEach(eventString => {\n          eventString = eventString.startsWith('event:') ? eventString : 'event:' + eventString\n          const { data, event } = parseEventString(eventString)\n\n          if (event === \"completion\" && data !== null) {\n            parsedEventEmitter.emit(\"data\", data)\n          } else if (event === \"done\") {\n            parsedEventEmitter.emit(\"trace\", data.traceId)\n            parsedEventEmitter.emit(\"document_chunks\", data.documentChunks)\n            parsedEventEmitter.emit(\"end\")\n          }\n        })\n\n        buffer = events[events.length - 1]\n      }\n    })\n\n    // Add an 'end' listener to handle any remaining data in the buffer.\n    rawStream.on(\"end\", () => {\n      // Check if there is any remanent data that constitutes a complete event.\n      if (buffer.trim()) {\n        // Ensure the buffer is treated as a complete event for parsing.\n        if (!buffer.startsWith('event:')) {\n          buffer = 'event:' + buffer\n        }\n        const { data, event } = parseEventString(buffer)\n        if (event === \"completion\" && data !== null) {\n          parsedEventEmitter.emit(\"data\", data)\n        } else if (event === \"done\") {\n          parsedEventEmitter.emit(\"trace\", data.traceId)\n          parsedEventEmitter.emit(\"document_chunks\", data.documentChunks)\n          parsedEventEmitter.emit(\"end\")\n        }\n      }\n    })\n\n    const iterable = eventEmitterToAsyncIterable<ChatCompletionStreamingCompletionData>(parsedEventEmitter)\n    return iterable as CreateChatCompletionOut<T>\n  } else {\n    return client.call<CreateChatCompletionResponse>(baseOptions) as Promise<CreateChatCompletionOut<T>>\n  }\n}\n","import { EventEmitter } from \"events\"\nimport { DocumentChunk } from \"../types\"\n\ntype Out = null | string | {\n  traceId: string,\n  documentChunks: DocumentChunk[]\n}\n\nexport function parseEventString(evt: string) {\n  const eventRegex = /event:\\s*(.+)/\n  const dataRegex = /data:\\s*(.+)/\n  const traceIdRegex = /trace_id:\\s*(.+)/\n  const documentChunksRegex = /document_chunks:\\s*(.+)/\n\n  const eventMatch = evt.match(eventRegex)\n  const dataMatch = evt.match(dataRegex)\n  const traceIdMatch = evt.match(traceIdRegex)\n  const documentChunksMatch = evt.match(documentChunksRegex)\n\n  const event = eventMatch ? eventMatch[1].trim() : null\n  let data: Out = dataMatch ? dataMatch[1].trim() : null\n  const traceId = traceIdMatch ? traceIdMatch[1].trim() : null\n  const documentChunks = documentChunksMatch ? JSON.parse(documentChunksMatch[1].trim()) : null\n\n  if (data) {\n    if (data === \"[DONE]\") {\n      data = { traceId: traceId!, documentChunks }\n    } else {\n      data = JSON.parse(data)\n    }\n  }\n\n  return { event, data }\n}\n\nexport function eventEmitterToAsyncIterable<T>(eventEmitter: EventEmitter): AsyncIterable<T> & {\n  trace_id: string | null,\n  document_chunks: null | DocumentChunk\n} {\n  const queue: any[] = []\n  let resolveQueue: any[] = []\n\n  function enqueue(value: any) {\n    if (resolveQueue.length > 0) {\n      const resolve = resolveQueue.shift()\n      resolve({ value, done: false })\n    } else {\n      queue.push(value)\n    }\n  }\n\n  function end() {\n    for (const resolve of resolveQueue) {\n      resolve({ value: undefined, done: true })\n    }\n    resolveQueue = []\n  }\n\n  const out: AsyncIterable<T> & {\n    trace_id: string | null,\n    document_chunks: null | DocumentChunk\n  } = {\n    trace_id: null,\n    document_chunks: null,\n    async *[Symbol.asyncIterator]() {\n      while (true) {\n        if (queue.length > 0) {\n          const value = queue.shift()\n          yield value\n        } else {\n          const promise = new Promise(resolve => resolveQueue.push(resolve))\n          const result: any = await promise\n          if (result.done) return\n          yield result.value\n        }\n      }\n    }\n  }\n\n  eventEmitter.on(\"data\", enqueue)\n  eventEmitter.once(\"end\", end)\n  eventEmitter.once(\"trace\", (traceId: string) => {\n    out.trace_id = traceId\n  })\n\n  eventEmitter.once(\"document_chunks\", (documentChunks: DocumentChunk) => {\n    out.document_chunks = documentChunks\n  })\n\n  return out\n}\n","import { APIModule } from \"$components/index\"\n\nimport v1_chat_completions_create from \"./operations/v1_chat_completions_create\"\n\nexport default class extends APIModule {\n    create = v1_chat_completions_create(this.client)\n}","import { AxiosRequestConfig } from \"axios\"\nimport Prem from \"$src/index\"\nimport type { operations } from \"$types/api\"\n\nexport default (client: Prem) => (params: operations[\"v1_embeddings_create\"][\"requestBody\"][\"content\"][\"application/json\"], options?: AxiosRequestConfig): Promise<operations[\"v1_embeddings_create\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]> => {\n  return client.call({\n    method: \"post\",\n    url: `/v1/embeddings`,\n    data: params,\n    ...options\n  })\n}","import { APIModule } from \"$components/index\"\n\nimport v1_embeddings_create from \"./operations/v1_embeddings_create\"\n\nexport default class extends APIModule {\n    create = v1_embeddings_create(this.client)\n}","import { AxiosRequestConfig } from \"axios\"\nimport Prem from \"$src/index\"\nimport type { operations } from \"$types/api\"\n\nexport default (client: Prem) => (options?: AxiosRequestConfig): Promise<operations[\"v1_models_list\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]> => {\n  return client.call({\n    method: \"get\",\n    url: `/v1/models/`,\n    \n    ...options\n  })\n}","import { AxiosRequestConfig } from \"axios\"\nimport Prem from \"$src/index\"\nimport type { operations } from \"$types/api\"\n\nexport default (client: Prem) => (id: string, options?: AxiosRequestConfig): Promise<operations[\"v1_models_retrieve\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]> => {\n  return client.call({\n    method: \"get\",\n    url: `/v1/models/${id}/`,\n    \n    ...options\n  })\n}","import { APIModule } from \"$components/index\"\n\nimport v1_models_list from \"./operations/v1_models_list\"\nimport v1_models_retrieve from \"./operations/v1_models_retrieve\"\n\nexport default class extends APIModule {\n    list = v1_models_list(this.client)\n\tretrieve = v1_models_retrieve(this.client)\n}","import { AxiosRequestConfig } from \"axios\"\nimport Prem from \"$src/index\"\nimport type { operations } from \"$types/api\"\n\nexport default (client: Prem) => (params: operations[\"v1_repositories_create\"][\"requestBody\"][\"content\"][\"application/json\"], options?: AxiosRequestConfig): Promise<operations[\"v1_repositories_create\"][\"responses\"][\"201\"][\"content\"][\"application/json\"]> => {\n  return client.call({\n    method: \"post\",\n    url: `/v1/repositories/`,\n    data: params,\n    ...options\n  })\n}","import { APIModule } from \"$components/index\"\n\nimport v1_repositories_create from \"./operations/v1_repositories_create\"\n\nexport default class extends APIModule {\n    create = v1_repositories_create(this.client)\n}","import { AxiosRequestConfig } from \"axios\"\nimport Prem from \"$src/index\"\nimport type { operations } from \"$types/api\"\nimport { createReadStream, existsSync } from \"fs\"\nimport FormData from \"form-data\"\n\nexport default (client: Prem) => (repository_id: string, params: operations[\"v1_repository_document_create\"][\"requestBody\"][\"content\"][\"application/json\"], options?: AxiosRequestConfig): Promise<operations[\"v1_repository_document_create\"][\"responses\"][\"201\"][\"content\"][\"application/json\"]> => {\n  const filePath = params.file\n\n  if (!existsSync(filePath)) {\n    throw new Error(`File not found: ${filePath}`)\n  }\n\n  const formData = new FormData()\n  const fileStream = createReadStream(filePath)\n  formData.append(\"file\", fileStream)\n\n  return client.call({\n    method: \"post\",\n    url: `/v1/repository/${repository_id}/document`,\n    data: formData,\n    headers: {\n      ...(options?.headers || {}),\n      ...formData.getHeaders(),\n    },\n    ...options\n  })\n}\n","import { APIModule } from \"$components/index\"\n\nimport v1_repository_document_create from \"./operations/v1_repository_document_create\"\n\nexport default class extends APIModule {\n    create = v1_repository_document_create(this.client)\n}","import { AxiosRequestConfig } from \"axios\"\nimport Prem from \"$src/index\"\nimport type { operations } from \"$types/api\"\n\nexport default (client: Prem) => (params: operations[\"v1_set_trace_feedback_create\"][\"requestBody\"][\"content\"][\"application/json\"], options?: AxiosRequestConfig): Promise<operations[\"v1_set_trace_feedback_create\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]> => {\n  return client.call({\n    method: \"post\",\n    url: `/v1/set_trace_feedback`,\n    data: params,\n    ...options\n  })\n}","import { APIModule } from \"$components/index\"\n\nimport v1_set_trace_feedback_create from \"./operations/v1_set_trace_feedback_create\"\n\nexport default class extends APIModule {\n    create = v1_set_trace_feedback_create(this.client)\n}","import { AxiosRequestConfig } from \"axios\"\nimport Prem from \"$src/index\"\nimport type { operations } from \"$types/api\"\n\nexport default (client: Prem) => (options?: AxiosRequestConfig): Promise<operations[\"v1_traces_list\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]> => {\n  return client.call({\n    method: \"get\",\n    url: `/v1/traces/`,\n    \n    ...options\n  })\n}","import { AxiosRequestConfig } from \"axios\"\nimport Prem from \"$src/index\"\nimport type { operations } from \"$types/api\"\n\nexport default (client: Prem) => (id: string, options?: AxiosRequestConfig): Promise<operations[\"v1_traces_retrieve\"][\"responses\"][\"200\"][\"content\"][\"application/json\"]> => {\n  return client.call({\n    method: \"get\",\n    url: `/v1/traces/${id}/`,\n    \n    ...options\n  })\n}","import { APIModule } from \"$components/index\"\n\nimport v1_traces_list from \"./operations/v1_traces_list\"\nimport v1_traces_retrieve from \"./operations/v1_traces_retrieve\"\n\nexport default class extends APIModule {\n    list = v1_traces_list(this.client)\n\tretrieve = v1_traces_retrieve(this.client)\n}"]}